# Default values for external-dns-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

annotationFilter: "giantswarm.io/external-dns=managed"

image:
  name: giantswarm/external-dns
  registry: docker.io
  tag: v0.11.0
  pullPolicy: IfNotPresent

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

commonLabels: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # Labels to add to the service account
  labels: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  additionalPermissions: []

# Annotations to add to the Deployment
deploymentAnnotations: {}

podLabels: {}

# Annotations to add to the Pod
podAnnotations:
  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
  prometheus.io/path: /metrics
  prometheus.io/port: "7979"
  prometheus.io/scrape: "true"
  kubectl.kubernetes.io/default-container: external-dns

shareProcessNamespace: false

podSecurityContext:
  fsGroup: 65534
  runAsGroup: 65534
  runAsUser: 65534

securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]

# Defaults to `ClusterFirst`.
# Valid values are: `ClusterFirstWithHostNet`, `ClusterFirst`, `Default` or `None`.
dnsPolicy:

priorityClassName: "giantswarm-critical"

terminationGracePeriodSeconds:

serviceMonitor:
  enabled: false
  # force namespace
  # namespace: monitoring

  # Fallback to the prometheus default unless specified
  # interval: 10s

  ## scheme: HTTP scheme to use for scraping. Can be used with `tlsConfig` for example if using istio mTLS.
  # scheme: ""

  ## tlsConfig: TLS configuration to use when scraping the endpoint. For example if using istio mTLS.
  ## Of type: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#tlsconfig
  # tlsConfig: {}

  # bearerTokenFile:
  # Fallback to the prometheus default unless specified
  # scrapeTimeout: 30s

  ## Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

  ## Used to pass annotations that are used by the Prometheus installed in your cluster to select Service Monitors to work with
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  annotations: {}

  ## Metric relabel configs to apply to samples before ingestion.
  ## [Metric Relabeling](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs)
  metricRelabelings: []
  # - action: keep
  #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
  #   sourceLabels: [__name__]

  ## Relabel configs to apply to samples before ingestion.
  ## [Relabeling](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config)
  relabelings: []
  # - sourceLabels: [__meta_kubernetes_pod_node_name]
  #   separator: ;
  #   regex: ^(.*)$
  #   targetLabel: nodename
  #   replacement: $1
  #   action: replace

  targetLabels: []

env: []

livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 2
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

service:
  port: 7979
  annotations:
    giantswarm.io/monitoring-path: /metrics
    giantswarm.io/monitoring-port: "7979"
    giantswarm.io/monitoring-app-label: "external-dns-app"

extraVolumes: []

extraVolumeMounts: []

resources:
  limits:
    memory: 100Mi
  requests:
    cpu: 50m
    memory: 100Mi

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

logLevel: info
logFormat: text

interval: 5m
triggerLoopOnEvent: false

namespaceFilter: kube-system
namespaced: false

sources:
  - service

policy: sync

registry: txt
txtOwnerId: ""
txtPrefix: ""
txtSuffix: ""

domainFilters: []

# provider
# Identifies the cloud provider. Currently supported: `aws` and `azure`. This *must*
# be set. If this is installed as a default app from the default-catalog then this
# value is set dynamically and will be overridden.
provider: CHANGEME

extraArgs: []

secretConfiguration:
  enabled: false
  mountPath: ""
  subPath: ""
  data: {}

deploymentStrategy:
  type: Recreate

# Configuration options for CRDs.
crd:
  install: true

# hostNetwork
hostNetwork: false

## Do not change any values below; these are specific to Giant Swarm environments.

# serviceType:
# Resources will be annotated with this value. Specific to Giant Swarm clusters.
serviceType: "managed"

# e2e
# Is the app running in CI.
e2e: false

# baseDomain
# The base domain of the cluster. This is only used if this chart is installed as
# a default app from the default-catalog. It is dynamically set and will be
# overridden. Specific to Giant Swarm clusters.
baseDomain: gigantic.io

# clusterID
# The cluster's ID. This is only used if this chart is installed as a default app
# from the default-catalog. It is dynamically set and will be overridden. Specific
# to Giant Swarm clusters.
clusterID: en2jo

ciliumNetworkPolicy:
  enabled: false

global:
  image:
    registry: docker.io
