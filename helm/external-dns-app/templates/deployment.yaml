apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/monitoring_basic_sli: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
        {{- if and (eq .Values.provider "gcp") (.Values.gcpServiceAccountID) (.Values.gcpWorkloadIdentityPool) (.Values.gcpIdentityProvider) }}
        giantswarm.io/gcp-workload-identity: enabled
        {{- end }}
      annotations:
        {{- if and (or (eq .Values.provider "aws") (eq .Values.provider "capa")) (eq .Values.aws.access "internal") ( eq .Values.aws.irsa "false") }}
        iam.amazonaws.com/role: {{ template "aws.iam.role" . }}
        {{- end }}
        scheduler.alpha.kubernetes.io/critical-pod: ''
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.global.metrics.port }}"
        prometheus.io/scrape: "{{ .Values.global.metrics.scrape }}"
        kubectl.kubernetes.io/default-container: "{{ .Release.Name }}"
    spec:
      serviceAccountName: {{ .Release.Name }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.userID }}
        runAsGroup: {{ .Values.global.securityContext.groupID }}
        fsGroup: {{ .Values.global.securityContext.fsGroupID }}
      priorityClassName: giantswarm-critical
      initContainers:
      {{- if and (or (eq .Values.provider "aws") (eq .Values.provider "capa")) (eq .Values.aws.access "internal") ( eq .Values.aws.irsa "false") }}
      - name: wait-for-iam-role
        image: {{ .Values.global.image.registry }}/giantswarm/alpine:3.16.2
        command:
        - /bin/sh
        - -c
        - counter=5; while ! wget -qO- http://169.254.169.254/latest/meta-data/iam/security-credentials/ | grep {{ template "aws.iam.role" . }}; do echo 'Waiting for iam-role to be available...'; sleep 5; let "counter-=1"  ; if [ "$counter" -eq "0" ]; then exit 1; fi; done
      {{- end }}
      {{- if eq .Values.provider "azure" }}
      - name: copy-azure-config-file
        image: {{ .Values.global.image.registry }}/giantswarm/alpine:3.16.2-python3
        command:
          - /bin/sh
          - -c
          # GS clusters have the cloud config file in /etc/kubernetes/config/azure.yaml and we can use it as-is so we just copy it to the desired position.
          # CAPZ clusters use a JSON file so we convert it to yaml and save it to the desired position.
          - if [ -f /etc/kubernetes/config/azure.yaml ];
            then
            cp /etc/kubernetes/config/azure.yaml /config/azure.yaml;
            else
            cat /etc/kubernetes/azure.json | python3 -c 'import sys, yaml, json; print(yaml.dump(json.loads(sys.stdin.read())))' > /config/azure.yaml;
            fi
        volumeMounts:
          - mountPath: /etc/kubernetes
            name: etc-kubernetes
            readOnly: true
          - mountPath: /config
            name: config
      {{- end }}
      containers:
      {{- if and (or (eq .Values.provider "aws") (eq .Values.provider "capa")) (eq .Values.aws.access "internal") ( eq .Values.aws.irsa "false") }}
      - name: "{{ .Release.Name }}-check-iam"
        image: {{ .Values.global.image.registry }}/giantswarm/alpine:3.16.2
        command:
        - /bin/sh
        - -c
        - while wget -qO- http://169.254.169.254/latest/meta-data/iam/security-credentials/ | grep -q {{ template "aws.iam.role" . }} ; do sleep 30 ; done && exit 1
        securityContext:
          readOnlyRootFilesystem: true
        resources:
{{ toYaml .Values.global.resources | indent 10 }}
      {{- end }}
      - name: {{ .Release.Name }}
        image: "{{ .Values.global.image.registry }}/{{ .Values.global.image.name }}:{{ .Values.global.image.tag }}"
        imagePullPolicy: IfNotPresent
        env:
        {{- if and (or (eq .Values.provider "aws") (eq .Values.provider "vmware")) .Values.externalDNS.aws_access_key_id .Values.externalDNS.aws_secret_access_key }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-route53-credentials
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-route53-credentials
              key: aws_secret_access_key
        {{- end }}
        {{- with .Values.aws.region }}
        - name: AWS_DEFAULT_REGION
          value: {{ . }}
        {{- end }}
        args:
        {{- if .Values.externalDNS.dryRun }}
        - --dry-run
        {{- end }}
        {{- range .Values.externalDNS.sources }}
        - --source={{ . }}
        {{- end }}
        - --policy={{ .Values.externalDNS.policy }}
        - --annotation-filter={{- template "annotation.filter" . }}
        {{- if .Values.externalDNS.interval }}
        - --interval={{ .Values.externalDNS.interval }}
        {{- end }}
        {{- include "dnsProvider.flags" . | nindent 8 }}
        - --metrics-address=:{{ .Values.global.metrics.port }}
        {{- if .Values.externalDNS.namespaceFilter }}
        - --namespace={{ .Values.externalDNS.namespaceFilter }}
        {{- end }}
        {{- if .Values.externalDNS.minEventSyncInterval }}
        - --min-event-sync-interval={{ .Values.externalDNS.minEventSyncInterval }}
        {{- end }}
        - --registry=txt
        - --txt-owner-id={{- template "txt.owner.id" . }}
        - --txt-prefix={{- template "txt.prefix" . }}
      {{- range .Values.externalDNS.extraArgs }}
        - {{ . }}
      {{- end }}
        securityContext:
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.global.metrics.port }}
            scheme: HTTP
        resources:
{{ toYaml .Values.global.resources | indent 10 }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.global.metrics.port }}
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        ports:
        - name: metrics
          containerPort: {{ .Values.global.metrics.port }}
          protocol: TCP
      {{- if eq .Values.provider "azure" }}
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
      volumes:
      - name: config
        emptyDir: {}
      - name: etc-kubernetes
        hostPath:
          path: /etc/kubernetes
      {{- end }}
