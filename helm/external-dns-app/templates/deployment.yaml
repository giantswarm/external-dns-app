apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    giantswarm.io/service-type: "managed"
    app: {{ .Values.name }}
  annotations:
    prometheus.io/port: '{{ .Values.metricsPort }}'
    prometheus.io/scrape: 'true'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        giantswarm.io/service-type: "managed"
        app: {{ .Values.name }}
      annotations:
        {{- if eq .Values.provider "aws" }}
        iam.amazonaws.com/role: {{ .Values.clusterID}}-Route53Manager-Role
        {{- end }}
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: {{ .Values.name }}
      securityContext:
        runAsUser: {{ .Values.userID }}
        runAsGroup: {{ .Values.groupID }}
        fsGroup: {{ .Values.groupID }}
      priorityClassName: giantswarm-critical
      {{- if eq .Values.provider "aws" }}
      initContainers:
      - name: wait-for-iam-role
        image: {{ .Values.image.registry }}/giantswarm/alpine:3.10
        command:
        - /bin/sh
        - -c
        - "while ! wget -qO- http://169.254.169.254/latest/meta-data/iam/security-credentials/ | grep {{ .Values.clusterID}}-Route53Manager-Role; do echo 'Waiting for iam-role to be available...'; sleep 5; done"
      {{- end }}
      containers:
      - name: {{ .Values.name }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: IfNotPresent
        args:
        {{- range .Values.sources }}
        - --source={{ . }}
        {{- end }}
        - --provider={{ .Values.provider }}
        {{- if eq .Values.provider "azure" }}
        - --azure-config-file=/azure/config/azure.yaml
        {{- end }}
        - --domain-filter={{ .Values.baseDomain }}
        - --metrics-address=:{{ .Values.metricsPort }}
        - --namespace={{ .Values.namespace }}
        - --registry=txt
        - --txt-owner-id=giantswarm-io-external-dns
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.metricsPort }}
            scheme: HTTP
        resources:
{{ toYaml .Values.resources | indent 10 }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.metricsPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
      {{- if eq .Values.provider "azure" }}
        volumeMounts:
        - name: azure-config-file
          mountPath: /azure/config
          readOnly: true
        - mountPath: /azure
          name: azure-config-file-ownership
      volumes:
      - name: azure-config-file
        hostPath:
          path: /etc/kubernetes/config
      - emptyDir: {}
        name: azure-config-file-ownership
      {{- end }}
