apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
    giantswarm.io/monitoring_basic_sli: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
      annotations:
        {{- if and (eq .Values.provider "aws") (eq .Values.aws.access "internal") }}
        {{- if .Values.aws.iam.customRoleName }}
        iam.amazonaws.com/role: {{ .Values.aws.iam.customRoleName }}
        {{- else }}
        iam.amazonaws.com/role: {{ .Values.clusterID}}-Route53Manager-Role
        {{- end }}
        {{- end }}
        scheduler.alpha.kubernetes.io/critical-pod: ''
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.global.metrics.port }}"
        prometheus.io/scrape: "{{ .Values.global.metrics.scrape }}"
    spec:
      serviceAccountName: {{ .Release.Name }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.userID }}
        runAsGroup: {{ .Values.global.securityContext.groupID }}
        fsGroup: {{ .Values.global.securityContext.fsGroupID }}
      priorityClassName: giantswarm-critical
      {{- if and (eq .Values.provider "aws") (eq .Values.aws.access "internal") }}
      initContainers:
      - name: wait-for-iam-role
        image: {{ .Values.global.image.registry }}/giantswarm/alpine:3.12.0
        command:
        - /bin/sh
        - -c
        - counter=5; while ! wget -qO- http://169.254.169.254/latest/meta-data/iam/security-credentials/ | grep {{ .Values.clusterID}}-Route53Manager-Role; do echo 'Waiting for iam-role to be available...'; sleep 5; let "counter-=1"  ; if [ "$counter" -eq "0" ]; then exit 1; fi; done
      {{- end }}
      containers:
      - name: {{ .Release.Name }}
        image: "{{ .Values.global.image.registry }}/{{ .Values.global.image.name }}:{{ .Values.global.image.tag }}"
        imagePullPolicy: IfNotPresent
        {{- if eq .Values.aws.access "external" }}
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-route53-credentials
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-route53-credentials
              key: aws_secret_access_key
        - name: AWS_DEFAULT_REGION
          value: {{ .Values.aws.region }}
        {{- end }}
        args:
        {{- range .Values.externalDNS.sources }}
        - --source={{ . }}
        {{- end }}
        {{- if .Values.externalDNS.interval }}
        - --interval={{ .Values.externalDNS.interval }}
        {{- end }}
        - --provider={{ .Values.provider }}
        {{- if eq .Values.provider "azure" }}
        - --azure-config-file=/azure/config/azure.yaml
        {{- end -}}
        {{- if eq .Values.provider "aws" }}
        {{- if eq .Values.aws.access "external" }}
        - --aws-zone-type=public
        {{- end }}
        {{- if .Values.aws.preferCNAME }}
        - --aws-prefer-cname
        {{- end }}
        {{- if .Values.aws.batchChangeSize }}
        - --aws-batch-change-size={{ .Values.aws.batchChangeSize }}
        {{- end }}
        {{- include "domain.list" . | nindent 8 }}
        {{- end }}
        - --metrics-address=:{{ .Values.global.metrics.port }}
        {{- if .Values.externalDNS.namespaceFilter }}
        - --namespace={{ .Values.externalDNS.namespaceFilter }}
        {{- end }}
        - --registry=txt
        - --txt-owner-id=giantswarm-io-external-dns
        {{- if .Values.externalDNS.registry.txtPrefix }}
        - --txt-prefix={{ .Values.externalDNS.registry.txtPrefix }}
        {{- else }}
        - --txt-prefix={{ .Values.clusterID }}
        {{- end }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.global.metrics.port }}
            scheme: HTTP
        resources:
{{ toYaml .Values.global.resources | indent 10 }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.global.metrics.port }}
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        ports:
        - name: metrics
          containerPort: {{ .Values.global.metrics.port }}
          protocol: TCP
      {{- if eq .Values.provider "azure" }}
        volumeMounts:
        - name: azure-config-file
          mountPath: /azure/config
          readOnly: true
        - mountPath: /azure
          name: azure-config-file-ownership
      volumes:
      - name: azure-config-file
        hostPath:
          path: /etc/kubernetes/config
      - emptyDir: {}
        name: azure-config-file-ownership
      {{- end }}
