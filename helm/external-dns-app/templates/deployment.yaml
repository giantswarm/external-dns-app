{{- $proxy := deepCopy .Values.cluster.proxy |  mustMerge .Values.proxy -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "external-dns.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "external-dns.labels" . | nindent 4 }}
    giantswarm.io/monitoring_basic_sli: "true"
  {{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "external-dns.selectorLabels" . | nindent 6 }}
  strategy:
    {{- toYaml .Values.deploymentStrategy | nindent 4 }}
  template:
    metadata:
      labels:
        {{- include "external-dns.labels" . | nindent 8 }}
        {{- if and (eq .Values.provider "gcp") (.Values.gcpProject) }}
        giantswarm.io/gcp-workload-identity: enabled
        {{- end }}
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- include "giantswarm.podAnnotations" . }}
      {{- if or .Values.secretConfiguration.enabled .Values.podAnnotations }}
      annotations:
        {{- if .Values.secretConfiguration.enabled }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "external-dns.serviceAccountName" . }}
      {{- with .Values.shareProcessNamespace }}
      shareProcessNamespace: {{ . }}
      {{- end }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.userID }}
        runAsGroup: {{ .Values.global.securityContext.groupID }}
        fsGroup: {{ .Values.global.securityContext.fsGroupID }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      {{- with .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ . }}
      {{- end }}
      {{- with .Values.dnsPolicy }}
      dnsPolicy: {{ . }}
      {{- end }}
      initContainers:
        {{- if and (or (eq .Values.provider "aws") (eq .Values.provider "capa")) (eq .Values.aws.access "internal") ( eq .Values.aws.irsa "false") }}
        - name: wait-for-iam-role
          image: {{ .Values.global.image.registry }}/giantswarm/alpine:3.16.2
          command:
          - /bin/sh
          - -c
          - counter=5; while ! wget -qO- http://169.254.169.254/latest/meta-data/iam/security-credentials/ | grep {{ template "aws.iam.role" . }}; do echo 'Waiting for iam-role to be available...'; sleep 5; let "counter-=1"  ; if [ "$counter" -eq "0" ]; then exit 1; fi; done
        {{- end }}
        {{- if eq .Values.provider "azure" }}
        - name: copy-azure-config-file
          image: {{ .Values.global.image.registry }}/giantswarm/alpine:3.16.2-python3
          command:
            - /bin/sh
            - -c
            # GS clusters have the cloud config file in /etc/kubernetes/config/azure.yaml and we can use it as-is so we just copy it to the desired position.
            # CAPZ clusters use a JSON file so we convert it to yaml and save it to the desired position.
            - if [ -f /etc/kubernetes/config/azure.yaml ];
              then
              cp /etc/kubernetes/config/azure.yaml /config/azure.yaml;
              else
              cat /etc/kubernetes/azure.json | python3 -c 'import sys, yaml, json; print(yaml.dump(json.loads(sys.stdin.read())))' > /config/azure.yaml;
              fi
          volumeMounts:
            - mountPath: /etc/kubernetes
              name: etc-kubernetes
              readOnly: true
            - mountPath: /config
              name: config
        {{- end }}
      containers:
        {{- if and (or (eq .Values.provider "aws") (eq .Values.provider "capa")) (eq .Values.aws.access "internal") ( eq .Values.aws.irsa "false") }}
        - name: "{{ .Release.Name }}-check-iam"
          image: {{ .Values.global.image.registry }}/giantswarm/alpine:3.16.2
          command:
          - /bin/sh
          - -c
          - while wget -qO- http://169.254.169.254/latest/meta-data/iam/security-credentials/ | grep -q {{ template "aws.iam.role" . }} ; do sleep 30 ; done && exit 1
          securityContext:
            readOnlyRootFilesystem: true
          resources:
            {{- toYaml .Values.global.resources | nindent 12 }}
        {{- end }}
        - name: external-dns
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.global.image.registry }}/{{ .Values.global.image.name }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          env:
            {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if and .Values.externalDNS.aws_access_key_id .Values.externalDNS.aws_secret_access_key }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-route53-credentials
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-route53-credentials
                  key: aws_secret_access_key
            {{- end }}
            {{- with .Values.aws.region }}
            - name: AWS_DEFAULT_REGION
              value: {{ . }}
            {{- end }}
            {{- if and $proxy.noProxy $proxy.http $proxy.https }}
            - name: NO_PROXY
              value: {{ $proxy.noProxy }}
            - name: no_proxy
              value: {{ $proxy.noProxy }}
            - name: HTTP_PROXY
              value: {{ $proxy.http }}
            - name: http_proxy
              value: {{ $proxy.http }}
            - name: HTTPS_PROXY
              value: {{ $proxy.https }}
            - name: https_proxy
              value: {{ $proxy.https }}
            {{- end }}
          args:
            - --log-level={{ .Values.logLevel }}
            - --log-format={{ .Values.logFormat }}
            {{- if .Values.triggerLoopOnEvent }}
            - --events
            {{- end }}
            {{- if .Values.externalDNS.dryRun }}
            - --dry-run
            {{- end }}
            {{- range .Values.externalDNS.sources }}
            - --source={{ . }}
            {{- end }}
            - --policy={{ .Values.externalDNS.policy }}
            - --annotation-filter={{- template "annotation.filter" . }}
            {{- if .Values.externalDNS.interval }}
            - --interval={{ .Values.externalDNS.interval }}
            {{- end }}
            {{- include "dnsProvider.flags" . | nindent 12 }}
            - --metrics-address=:{{ .Values.global.metrics.port }}
            {{- if .Values.externalDNS.namespaceFilter }}
            - --namespace={{ .Values.externalDNS.namespaceFilter }}
            {{- end }}
            {{- if .Values.externalDNS.minEventSyncInterval }}
            - --min-event-sync-interval={{ .Values.externalDNS.minEventSyncInterval }}
            {{- end }}
            - --registry=txt
            - --txt-owner-id={{- template "txt.owner.id" . }}
            - --txt-prefix={{- template "txt.prefix" . }}
            {{- range .Values.externalDNS.extraArgs }}
            - {{ . }}
            {{- end }}
          ports:
            - name: metrics
              protocol: TCP
              containerPort: {{ .Values.global.metrics.port }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.global.metrics.port }}
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.global.metrics.port }}
              scheme: HTTP
          {{- if or .Values.secretConfiguration.enabled .Values.extraVolumeMounts (eq .Values.provider "azure") }}
          volumeMounts:
            {{- if eq .Values.provider "azure" }}
            - name: config
              mountPath: /config
              readOnly: true
            {{- end }}
            {{- if .Values.secretConfiguration.enabled }}
            - name: secrets
              mountPath: {{ tpl .Values.secretConfiguration.mountPath $ }}
            {{- with .Values.secretConfiguration.subPath }}
              subPath: {{ tpl . $ }}
            {{- end }}
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.global.resources | nindent 12 }}
      {{- if or .Values.secretConfiguration.enabled .Values.extraVolumes (eq .Values.provider "azure") }}
      volumes:
        {{- if eq .Values.provider "azure" }}
        - name: config
          emptyDir: {}
        - name: etc-kubernetes
          hostPath:
            path: /etc/kubernetes
        {{- end }}
        {{- if .Values.secretConfiguration.enabled }}
        - name: secrets
          secret:
            secretName: {{ include "external-dns.fullname" . }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
